// Generated from ../grammar/antlr4/Skolloble.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class SkollobleLexer extends Lexer {
	public static readonly NEWLINE = 1;
	public static readonly Space = 2;
	public static readonly INTOATTR = 3;
	public static readonly BackNamespaceSign = 4;
	public static readonly ForeNamespaceSign = 5;
	public static readonly ID = 6;
	public static readonly WholeWrap = 7;
	public static readonly SingleBlock = 8;
	public static readonly NoBlock = 9;
	public static readonly GoOutBLOCK = 10;
	public static readonly INTOBLOCK = 11;
	public static readonly STRING = 12;
	public static readonly Comment = 13;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"NEWLINE", "Space", "INTOATTR", "IDSUR", "IDINNER", "NAMING", "BackNamespaceSign", 
		"ForeNamespaceSign", "ID", "WholeWrap", "SingleBlock", "NoBlock", "GoOutBLOCK", 
		"INTOBLOCK", "STRING", "Comment",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "':'", "'@'", "'<>'", undefined, "'/'", 
		"'-'", "';'", "'}'", "'{'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "NEWLINE", "Space", "INTOATTR", "BackNamespaceSign", "ForeNamespaceSign", 
		"ID", "WholeWrap", "SingleBlock", "NoBlock", "GoOutBLOCK", "INTOBLOCK", 
		"STRING", "Comment",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SkollobleLexer._LITERAL_NAMES, SkollobleLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return SkollobleLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(SkollobleLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Skolloble.g4"; }

	// @Override
	public get ruleNames(): string[] { return SkollobleLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return SkollobleLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return SkollobleLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return SkollobleLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x0Ft\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x03\x02\x03\x02" +
		"\x03\x02\x05\x02\'\n\x02\x03\x02\x03\x02\x03\x03\x06\x03,\n\x03\r\x03" +
		"\x0E\x03-\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x05" +
		"\x067\n\x06\x03\x07\x06\x07:\n\x07\r\x07\x0E\x07;\x03\x07\x06\x07?\n\x07" +
		"\r\x07\x0E\x07@\x03\x07\x03\x07\x05\x07E\n\x07\x03\b\x03\b\x03\t\x03\t" +
		"\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0F\x03\x0F\x03\x10\x03\x10\x07\x10Z\n\x10\f\x10\x0E\x10]\v\x10\x03" +
		"\x10\x03\x10\x03\x10\x07\x10b\n\x10\f\x10\x0E\x10e\v\x10\x03\x10\x05\x10" +
		"h\n\x10\x03\x11\x03\x11\x07\x11l\n\x11\f\x11\x0E\x11o\v\x11\x03\x11\x03" +
		"\x11\x03\x11\x03\x11\x05[cm\x02\x02\x12\x03\x02\x03\x05\x02\x04\x07\x02" +
		"\x05\t\x02\x02\v\x02\x02\r\x02\x02\x0F\x02\x06\x11\x02\x07\x13\x02\b\x15" +
		"\x02\t\x17\x02\n\x19\x02\v\x1B\x02\f\x1D\x02\r\x1F\x02\x0E!\x02\x0F\x03" +
		"\x02\x05\x04\x02\v\v\"\"\x06\x022;C\\aac|\x07\x02/02;C\\aac|\x02y\x02" +
		"\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02" +
		"\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02" +
		"\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02" +
		"\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02" +
		"!\x03\x02\x02\x02\x03&\x03\x02\x02\x02\x05+\x03\x02\x02\x02\x071\x03\x02" +
		"\x02\x02\t3\x03\x02\x02\x02\v6\x03\x02\x02\x02\r9\x03\x02\x02\x02\x0F" +
		"F\x03\x02\x02\x02\x11H\x03\x02\x02\x02\x13K\x03\x02\x02\x02\x15M\x03\x02" +
		"\x02\x02\x17O\x03\x02\x02\x02\x19Q\x03\x02\x02\x02\x1BS\x03\x02\x02\x02" +
		"\x1DU\x03\x02\x02\x02\x1Fg\x03\x02\x02\x02!i\x03\x02\x02\x02#\'\x07\f" +
		"\x02\x02$%\x07\x0F\x02\x02%\'\x07\f\x02\x02&#\x03\x02\x02\x02&$\x03\x02" +
		"\x02\x02\'(\x03\x02\x02\x02()\b\x02\x02\x02)\x04\x03\x02\x02\x02*,\t\x02" +
		"\x02\x02+*\x03\x02\x02\x02,-\x03\x02\x02\x02-+\x03\x02\x02\x02-.\x03\x02" +
		"\x02\x02./\x03\x02\x02\x02/0\b\x03\x02\x020\x06\x03\x02\x02\x0212\x07" +
		"<\x02\x022\b\x03\x02\x02\x0234\t\x03\x02\x024\n\x03\x02\x02\x0257\t\x04" +
		"\x02\x0265\x03\x02\x02\x027\f\x03\x02\x02\x028:\x05\t\x05\x0298\x03\x02" +
		"\x02\x02:;\x03\x02\x02\x02;9\x03\x02\x02\x02;<\x03\x02\x02\x02<D\x03\x02" +
		"\x02\x02=?\x05\v\x06\x02>=\x03\x02\x02\x02?@\x03\x02\x02\x02@>\x03\x02" +
		"\x02\x02@A\x03\x02\x02\x02AB\x03\x02\x02\x02BC\x05\t\x05\x02CE\x03\x02" +
		"\x02\x02D>\x03\x02\x02\x02DE\x03\x02\x02\x02E\x0E\x03\x02\x02\x02FG\x07" +
		"B\x02\x02G\x10\x03\x02\x02\x02HI\x07>\x02\x02IJ\x07@\x02\x02J\x12\x03" +
		"\x02\x02\x02KL\x05\r\x07\x02L\x14\x03\x02\x02\x02MN\x071\x02\x02N\x16" +
		"\x03\x02\x02\x02OP\x07/\x02\x02P\x18\x03\x02\x02\x02QR\x07=\x02\x02R\x1A" +
		"\x03\x02\x02\x02ST\x07\x7F\x02\x02T\x1C\x03\x02\x02\x02UV\x07}\x02\x02" +
		"V\x1E\x03\x02\x02\x02W[\x07$\x02\x02XZ\v\x02\x02\x02YX\x03\x02\x02\x02" +
		"Z]\x03\x02\x02\x02[\\\x03\x02\x02\x02[Y\x03\x02\x02\x02\\^\x03\x02\x02" +
		"\x02][\x03\x02\x02\x02^h\x07$\x02\x02_c\x07b\x02\x02`b\v\x02\x02\x02a" +
		"`\x03\x02\x02\x02be\x03\x02\x02\x02cd\x03\x02\x02\x02ca\x03\x02\x02\x02" +
		"df\x03\x02\x02\x02ec\x03\x02\x02\x02fh\x07b\x02\x02gW\x03\x02\x02\x02" +
		"g_\x03\x02\x02\x02h \x03\x02\x02\x02im\x07,\x02\x02jl\v\x02\x02\x02kj" +
		"\x03\x02\x02\x02lo\x03\x02\x02\x02mn\x03\x02\x02\x02mk\x03\x02\x02\x02" +
		"np\x03\x02\x02\x02om\x03\x02\x02\x02pq\x07,\x02\x02qr\x03\x02\x02\x02" +
		"rs\b\x11\x02\x02s\"\x03\x02\x02\x02\r\x02&-6;@D[cgm\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SkollobleLexer.__ATN) {
			SkollobleLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SkollobleLexer._serializedATN));
		}

		return SkollobleLexer.__ATN;
	}

}

